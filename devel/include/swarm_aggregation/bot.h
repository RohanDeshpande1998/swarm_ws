// Generated by gencpp from file swarm_aggregation/bot.msg
// DO NOT EDIT!


#ifndef SWARM_AGGREGATION_MESSAGE_BOT_H
#define SWARM_AGGREGATION_MESSAGE_BOT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_aggregation
{
template <class ContainerAllocator>
struct bot_
{
  typedef bot_<ContainerAllocator> Type;

  bot_()
    : id()
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_theta(0.0)
    , vel_x(0.0)
    , vel_y(0.0)  {
    }
  bot_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_theta(0.0)
    , vel_x(0.0)
    , vel_y(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef double _pose_x_type;
  _pose_x_type pose_x;

   typedef double _pose_y_type;
  _pose_y_type pose_y;

   typedef double _pose_theta_type;
  _pose_theta_type pose_theta;

   typedef double _vel_x_type;
  _vel_x_type vel_x;

   typedef double _vel_y_type;
  _vel_y_type vel_y;





  typedef boost::shared_ptr< ::swarm_aggregation::bot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_aggregation::bot_<ContainerAllocator> const> ConstPtr;

}; // struct bot_

typedef ::swarm_aggregation::bot_<std::allocator<void> > bot;

typedef boost::shared_ptr< ::swarm_aggregation::bot > botPtr;
typedef boost::shared_ptr< ::swarm_aggregation::bot const> botConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_aggregation::bot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_aggregation::bot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_aggregation::bot_<ContainerAllocator1> & lhs, const ::swarm_aggregation::bot_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.pose_theta == rhs.pose_theta &&
    lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_aggregation::bot_<ContainerAllocator1> & lhs, const ::swarm_aggregation::bot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_aggregation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_aggregation::bot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_aggregation::bot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_aggregation::bot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_aggregation::bot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_aggregation::bot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_aggregation::bot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_aggregation::bot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cb3c0cf91cbe6f044efb99c3a3f8cdf";
  }

  static const char* value(const ::swarm_aggregation::bot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cb3c0cf91cbe6f0ULL;
  static const uint64_t static_value2 = 0x44efb99c3a3f8cdfULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_aggregation::bot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_aggregation/bot";
  }

  static const char* value(const ::swarm_aggregation::bot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_aggregation::bot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"float64 pose_x\n"
"float64 pose_y\n"
"float64 pose_theta\n"
"float64 vel_x\n"
"float64 vel_y\n"
;
  }

  static const char* value(const ::swarm_aggregation::bot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_aggregation::bot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_theta);
      stream.next(m.vel_x);
      stream.next(m.vel_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_aggregation::bot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_aggregation::bot_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "pose_x: ";
    Printer<double>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<double>::stream(s, indent + "  ", v.pose_y);
    s << indent << "pose_theta: ";
    Printer<double>::stream(s, indent + "  ", v.pose_theta);
    s << indent << "vel_x: ";
    Printer<double>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<double>::stream(s, indent + "  ", v.vel_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_AGGREGATION_MESSAGE_BOT_H
